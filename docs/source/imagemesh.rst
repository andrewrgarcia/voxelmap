ImageMesh : A Convex Hull based 3D Reconstruction Method
============================================================

**Andrew R. Garcia**

garcia.gtr@gmail.com

.. 
  last web revision: Dec 2022
  revised as whitepaper: Mar 2023

Abstract:
-------------------------------

ImageMesh is a method available in versions :math:`\ge` 2.0 of the voxelmap Python library that generates 3D models from images using Convex Hull in 3-D to enclose external 
points obtained from a series of partitioned point clouds. These point clouds are generated by assigning the relative pixel intensities from the partitioned images 
as the depth dimension to the points. In this paper, we describe the limitations of the original ImageMesh method and the quick solution we have implemented to address them. 
Additionally, we introduce MeshView, a Python visualization tool developed in tandem with ImageMesh that provides a convenient way to visualize the 3D models generated by ImageMesh.
Finally, we discuss the GPU memory space complexity of both methods.


Introduction:
-----------------

.. figure:: ../img/imagemesh/donut.png
  :width: 250
  :alt: Image of a Donut

  An image of a crochet donut 


.. figure:: ../img/imagemesh/donut_imagemesh.png
  :width: 250
  :alt: ImageMesh 3D Mesh Transformation of Donut Image

  3-D reconstruction of donut image with ImageMesh


ImageMesh is a 3D reconstruction method. It utilizes Convex Hull in 3-D to enclose external points obtained from a series of partitioned point clouds, 
which are generated by assigning the relative pixel intensities from the partitioned images as the depth dimension to the point clouds.
ImageMesh generates 3-D model .obj files from images by drawing the smallest collection of triangular polygons that satisfies this rule in three-dimensional space. 
In simpler terms, it's like placing a fabric over a 3-D object. However, it is important to note that a single convex hull operation may fail to draw a structure with holes or bumps,
which are essentially 2-D local extrema.



To address this limitation, we have implemented a quick solution that involves partitioning the input image into multiple segments and placing 3-D convex hull "sheets" on each segment to perform triangulation. 
Figure 3 shows how this partitioning can process more local extrema with the 3-D Convex Hull method and create more realistic 3-D reconstructions. 


.. figure:: ../img/imagemesh/method.png
  :width: 550
  :alt: ImageMesh method

  Schematic representation of the performance of ImageMesh with more segments. 

In the Figure 4, blurring is performed to create a more realistic 3-D texture with the ImageMesh method. 
Blurring an image can be thought of as a process of smoothing out the details in the image by reducing the contrast between adjacent pixels.
This results in a 3-D effect where the image appears to have a more uniform and continuous surface. 
Instead of sharp edges and abrupt changes in color or texture, blurred images have a softer and more gradual transition between different parts of the image.

.. figure:: ../img/imagemesh/landim.png
  :width: 550
  :alt: Land IM

  Blurring of former image to create a smoother 3-D texture with ImageMesh. 


Complementing ImageMesh is MeshView, a Python visualization tool developed in tandem to provide a convenient way to visualize the 3D models generated by ImageMesh. 
MeshView is capable of loading the .obj files generated by ImageMesh and rendering them in a PyVista VTK window, allowing for interactive 3D visualization of the models


.. figure:: ../img/imagemesh/sectors.png
  :width: 550
  :alt: ImageMesh sectors
  
  The graphical effect of increasing the number of 3-D Convex Hull (CH) sectors in each column. The left column shows 1 CH sector, the middle column shows 4 CH sectors, and the right column shows 16 CH sectors.

.. 
  GPU Memory Space Complexity
  --------------------------------

  In this section, we will discuss the GPU memory space complexity of the two methods used in ImageMesh. The voxel-per-pixel method used in earlier versions of ImageMesh
  involves rendering a cube from every "n" input point, with each cube comprising 12 triangles in computer graphics. As a result, the GPU space complexity of this method is 
  :math:`\mathcal{O}(12 n)`

  To improve on this method, the new Convex Hull method uses the input points as vertices to form triangles that make up a polyhedron in 3-D space. Additionally, 
  this method partitions the image into "s" sectors to increase resolution. The space complexity of the new method approximates to
  :math:`\mathcal{O}(n \sqrt{s}/3)`
  , which is significantly
  lower than the voxel-per-pixel method. 

  .. _fig-main:

  .. figure:: ../img/imagemesh/space_complexity.png
    :width: 500
    :alt: GPU Space Complexity

    Space complexity for graphics represented by the number of simplices made for the 3-D model from an image with :math:`x` number of pixels.

  In simpler terms, the new method reduces the amount of GPU memory required to generate 3D models from images, making it more efficient and scalable for large datasets. 
  This reduction in GPU memory space complexity is a significant advantage of the Convex Hull method over the voxel-per-pixel method.


Time Complexity
----------------------

When using a voxel-based approach for 3-D reconstruction from an image, that is, converting the 2-D image to a voxel cloud, the time complexity for converting 
the 2-D image to a voxel cloud is :math:`\mathcal{O}(w h d)`, where :math:`w` and :math:`h` are the width and height of the image, and :math:`d` is the depth of the voxel cloud. 
In comparison, the ImageMesh method for 3-D reconstruction involves 3 main steps which have its own computational complexity. In the next paragraphs 
we elaborate on the steps for this method and their associated time complexities. 

In the first step, the image is sliced into equally-sized sectors: :math:`\mathcal{O}(w h)`, where :math:`w` is the width of the image and :math:`h` is its height. After this, 
each of the 2-D sectors are mapped to 3-D point clouds, with a time complexity :math:`\mathcal{O}(w h)`, where w and h are the width and height of the image. 

3-D Convex Hull is then performed on each of these point clouds with :math:`\mathcal{O}(n \log n)`, where :math:`n` is the number of points in each 3-D point cloud.
For this last step, we use the ``scipy.spatial.ConvexHull`` algorithm for computing the convex hull of the 3-D point clouds. Th algorithm uses a 
divide-and-conquer approach based on the QuickHull algorithm, which has an average case time complexity of :math:`\mathcal{O}(n \log n)`.
This makes the ``scipy.spatial.ConvexHull`` algorithm efficient for computing the convex hull of a 3-D point cloud, especially for larger datasets.
However, the time complexity for the worst-case scenario of QuickHull is :math:`\mathcal{O}(n^2)`, which means that in some cases, the ``scipy.spatial.ConvexHull`` algorithm may take longer to run.

Therefore, the overall time complexity of ImageMesh can be estimated as :math:`\mathcal{O}(w h n \log n)`, 
where :math:`w` and :math:`h` are the width and height of the image, and :math:`n` is the number of points in each 3-D point cloud.


When considering the time complexity of the two methods, it is clear that ImageMesh, a method which generates a single mesh with multiple steps, 
has a higher computational cost than the voxel-based approac, a method which generates multiple voxel meshes. However, it is important to note that 
the graphical manipulation of the single mesh is superior to the latter method. This is because a single mesh can update all its defined vertices
more efficiently than updating multiple voxel meshes.

As a result, ImageMesh is more suitable for applications that require real-time graphical
manipulation or rendering, where the speed of the graphics processing is crucial. On the other hand, the voxel mesh method may be more appropriate
for applications where the accuracy of the reconstruction is more important than the graphical performance, and where the computational cost can be 
distributed over multiple processors or computer nodes.



Conclusion:
-----------------

ImageMesh, coupled with MeshView, provides a powerful and efficient 3D reconstruction method. By implementing the Convex Hull-based method with partitioning,
we have addressed the limitation of a single convex hull operation and increased the resolution of the reconstructed 3D models. With the reduction in GPU space complexity,
the new method has become more practical for real-world applications.

